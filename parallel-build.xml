<?xml version="1.0" encoding="UTF-8"?>
<project name="rest-api" default="full-build">
    <property name="toolsdir" value="bin/" />
    <property name="builddir" value="${basedir}/app/build" />
    <property name="sourcedir" value="${basedir}/src" />

    <!-- Use this when the tools are managed by Composer in ${basedir}/vendor/bin -->
    <property name="pdepend" value="bin/pdepend"/>
    <property name="phpcpd"  value="bin/phpcpd"/>
    <property name="phpcs"   value="bin/phpcs"/>
    <property name="phpdox"  value="bin/phpdox"/>
    <property name="phploc"  value="bin/phploc"/>
    <property name="phpmd"   value="bin/phpmd"/>
    <property name="phpunit" value="bin/phpunit"/>
    <condition property="parallel-lint" value="${basedir}/bin/parallel-lint.bat" else="${basedir}/bin/parallel-lint">
        <os family="windows"/>
    </condition>

    <!-- By default, we assume all tools to be on the $PATH or we set the $toolsdirs-->
    <!--<property name="pdepend" value="pdepend"/>-->
    <!--<property name="phpcpd"  value="phpcpd"/>-->
    <!--<property name="phpcs"   value="phpcs"/>-->
    <!--<property name="phpdox"  value="phpdox"/>-->
    <!--<property name="phploc"  value="phploc"/>-->
    <!--<property name="phpmd"   value="phpmd"/>-->
    <!--<property name="phpunit" value="phpunit"/>-->

    <!-- Use this when the tools are located as PHARs in ${basedir}/build/tools
    <property name="pdepend" value="${basedir}/build/tools/pdepend.phar"/>
    <property name="phpcpd"  value="${basedir}/build/tools/phpcpd.phar"/>
    <property name="phpcs"   value="${basedir}/build/tools/phpcs.phar"/>
    <property name="phpdox"  value="${basedir}/build/tools/phpdox.phar"/>
    <property name="phploc"  value="${basedir}/build/tools/phploc.phar"/>
    <property name="phpmd"   value="${basedir}/build/tools/phpmd.phar"/>
    <property name="phpunit" value="${basedir}/build/tools/phpunit.phar"/> -->

    <target name="full-build"
         depends="prepare, composer, bower,static-analysis,phpunit,phpdox,-check-failure"
         description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="full-build-parallel"
         depends="prepare, composer, bower,static-analysis-parallel,phpunit,phpdox,-check-failure"
         description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

    <target name="quick-build"
         depends="prepare,composer, bower,parallel-lint,phpunit-no-coverage"
         description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

    <target name="static-analysis"
         depends="parallel-lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
         description="Performs static analysis" />

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
         description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="parallel-lint"/>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
         unless="clean.done"
         description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
         unless="prepare.done"
         depends="clean"
         description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <mkdir dir="${builddir}/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="parallel-lint" unless="parallel-lint.done" description="Run PHP parallel lint">
        <exec executable="${parallel-lint}" failonerror="true">
            <arg line="--exclude" />
            <arg path="${basedir}/app/" />
            <arg line="--exclude" />
            <arg path="${basedir}/vendor/" />
            <arg path="${basedir}" />
        </exec>
        <property name="parallel-lint" value="true"/>
    </target>

    <!--<target name="lint"-->
         <!--unless="lint.done"-->
         <!--description="Perform syntax check of sourcecode files">-->
        <!--<apply executable="php" taskname="lint">-->
            <!--<arg value="-l" />-->

            <!--<fileset dir="${sourcedir}">-->
                <!--<include name="**/*.php" />-->
                <!--<modified />-->
            <!--</fileset>-->

            <!--<fileset dir="${basedir}/tests">-->
                <!--<include name="**/*.php" />-->
                <!--<modified />-->
            <!--</fileset>-->
        <!--</apply>-->

        <!--<property name="lint.done" value="true"/>-->
    <!--</target>-->

    <target name="phploc"
         unless="phploc.done"
         description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg path="${sourcedir}" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci"
         unless="phploc.done"
         depends="prepare"
         description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${builddir}/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${builddir}/logs/phploc.xml" />
            <arg path="${sourcedir}" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend"
         unless="pdepend.done"
         depends="prepare"
         description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${sourcedir}" />
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
         unless="phpmd.done"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${sourcedir}" />
            <arg value="text" />
            <arg path="${basedir}/app/parallel-phpmd.xml" />
         </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
         unless="phpmd.done"
         depends="prepare"
         description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg path="${basedir}/app/parallel-phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${builddir}/logs/pmd.xml" />
         </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs"
         unless="phpcs.done"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${sourcedir}" />
            <!--<arg path="${basedir}/tests" />-->
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci"
         unless="phpcs.done"
         depends="prepare"
         description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${sourcedir}" />
            <!--<arg path="${basedir}/tests" />-->
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd"
             unless="phpcpd.done"
             description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg path="${sourcedir}" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci"
         unless="phpcpd.done"
         depends="prepare"
         description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd" />
           <arg path="${builddir}/logs/pmd-cpd.xml" />
           <arg path="${sourcedir}" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

     <target name="phpunit"
             unless="phpunit.done"
             depends="prepare"
             description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/app/parallel-phpunit.xml"/>
        </exec>

        <property name="phpunit.done" value="true"/>
     </target>

    <target name="phpunit-no-coverage"
         unless="phpunit.done"
         depends="prepare"
         description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/parallel-phpunit.xml"/>
            <arg value="--no-coverage"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpdox" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate project documentation using phpDox">
        <exec executable="${toolsdir}phpdox">
            <arg value="--file" />
            <arg value="${basedir}/app/parallel-phpdox.xml" />
        </exec>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                     <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="composer" description="Installing composer dependencies">
        <exec executable="composer" failonerror="true">
            <arg value="install" />
            <arg value="--prefer-dist" />
            <arg value="--no-progress" />

            <!--It’s important to set SYMFONY_ENV to test so symfony knows it has to clear its test cache directory.-->
            <env key="SYMFONY_ENV" value="test"/>
        </exec>
    </target>

    <!--if we have bower we will install it-->
    <target name="bower" description="Installing bower dependencies">
        <exec executable="bower" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

</project>

